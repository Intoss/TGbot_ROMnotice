–•# OWNER_ID is set to your Telegram ID (owner): 1850766719

import os
import psycopg2
import asyncio
from datetime import datetime, timedelta, timezone
from typing import Dict
from telegram import BotCommand, MenuButtonCommands
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (ApplicationBuilder, ContextTypes, CommandHandler,
                          CallbackQueryHandler, MessageHandler, filters)

# ---------------- CONFIG ----------------
OWNER_ID = 1850766719  # —Ç–≤–æ–π ID - –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))

if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Railway ‚Üí Variables")
DB_PATH = "bot.db"
DB_CONN = psycopg2.connect(
    port=os.environ.get["PGPORT"],
    user=os.environ.get["PGUSER"],
    password=os.environ.get["PGPASSWORD"],
    database=os.environ.get["PGDATABASE"],
    host=os.environ.get["PGHOST"]
    )
    
# Two clans
CLANS = ["BALDEG", "AlterEgo"]
awaiting_custom_timer: Dict[str, Dict] = {}
# Bosses list exactly as requested (keep numbers)
# Map key -> (display_name, respawn_hours)
#BOSSES = {
#"02. Windlong (Gigantus)": 2,
#"03. Death Valley (DeathCrow)": 2,
#"05. Dark Forest (Floneble)": 3,
#"06. Limst (Chimera)": 3,
#"08. Fire Plains (Lindwurm)": 3,
#"10. Croco Forest (Gyes)": 3,
#"12. Fog Valley (Thrandir)": 4,
#"14. Kar. Volcano (Ruginoa)": 4,
#"17. Cremo Lake (Briare)": 5,
#"18. Rain Bay (Lythea)": 5,
#"19. Akama Salt Desert (Leo)": 5,
# }
# ----------------------------------------
BOSSES = {
    "02.Map ": 2,
    "03.Map ": 2,
    "05.Map ": 3,
    "06.Map ": 3,
    "08.Map ": 3,
    "10.Map ": 3,
    "12.Map ": 4,
    "14.Map ": 4,
    "17.Map ": 5,
    "18.Map ": 5,
    "19.Map ": 5,
}
# In-memory running tasks (boss_key -> asyncio.Task)
boss_tasks: Dict[str, asyncio.Task] = {}

# ---------------- Database ----------------
DB_CONN = psycopg2.connect(
    host=os.environ.get["PGHOST"],
    port=os.environ.get("PGPORT", 5432),
    user=os.environ["PGUSER"],
    password=os.environ["PGPASSWORD"],
    database=os.environ["PGDATABASE"]
)

def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–æ—Å—Å–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞."""
    with DB_CONN.cursor() as c:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute("""
            CREATE TABLE IF NOT EXISTS users (
                telegram_id BIGINT PRIMARY KEY,
                role TEXT NOT NULL DEFAULT 'user'
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –±–æ—Å—Å–æ–≤
        c.execute("""
            CREATE TABLE IF NOT EXISTS bosses (
                name TEXT PRIMARY KEY,
                respawn_hours INTEGER NOT NULL,
                last_killer TEXT,
                respawn_end_ts BIGINT
            )
        """)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Å—Å–æ–≤
        for name, hours in BOSSES.items():
            c.execute("""
                INSERT INTO bosses (name, respawn_hours)
                VALUES (%s, %s)
                ON CONFLICT (name) DO NOTHING
            """, (name, hours))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∞
        c.execute("""
            INSERT INTO users (telegram_id, role)
            VALUES (%s, %s)
            ON CONFLICT (telegram_id) DO NOTHING
        """, (OWNER_ID, "admin"))

    DB_CONN.commit()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()


# ---------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π ----------------
def add_user_if_not_exists(telegram_id: int):
    with DB_CONN.cursor() as c:
        c.execute("SELECT telegram_id FROM users WHERE telegram_id = %s", (telegram_id,))
        if c.fetchone() is None:
            c.execute("INSERT INTO users (telegram_id, role) VALUES (%s, %s)", (telegram_id, "user"))
    DB_CONN.commit()


def set_admin(telegram_id: int):
    with DB_CONN.cursor() as c:
        c.execute("""
            INSERT INTO users (telegram_id, role)
            VALUES (%s, %s)
            ON CONFLICT (telegram_id) DO UPDATE SET role = EXCLUDED.role
        """, (telegram_id, "admin"))
    DB_CONN.commit()


def is_admin(telegram_id: int) -> bool:
    if telegram_id == OWNER_ID:
        return True
    with DB_CONN.cursor() as c:
        c.execute("SELECT role FROM users WHERE telegram_id = %s", (telegram_id,))
        r = c.fetchone()
    return r is not None and r[0] == "admin"


def get_all_user_ids():
    with DB_CONN.cursor() as c:
        c.execute("SELECT telegram_id FROM users")
        return [row[0] for row in c.fetchall()]


def set_boss_killer_and_respawn(boss_name: str, killer: str, respawn_end_ts: int):
    with DB_CONN.cursor() as c:
        c.execute("""
            UPDATE bosses
            SET last_killer = %s, respawn_end_ts = %s
            WHERE name = %s
        """, (killer, respawn_end_ts, boss_name))
    DB_CONN.commit()


def get_boss_info(boss_name: str):
    with DB_CONN.cursor() as c:
        c.execute("""
            SELECT respawn_hours, last_killer, respawn_end_ts
            FROM bosses
            WHERE name = %s
        """, (boss_name,))
        row = c.fetchone()
    if row:
        return {"respawn_hours": row[0], "last_killer": row[1], "respawn_end_ts": row[2]}
    return None


def get_all_bosses():
    with DB_CONN.cursor() as c:
        c.execute("SELECT name, respawn_hours, last_killer, respawn_end_ts FROM bosses")
        return c.fetchall()



# ---------------- Utilities ----------------
def format_datetime_ts(ts: int) -> str:
    # ts is unix timestamp (seconds)
    tz = timezone(timedelta(hours=3))  # UTC+3
    return datetime.fromtimestamp(ts, tz=tz).strftime("%d-%m %H:%M:%S")


async def broadcast_message(application, text: str):
    user_ids = get_all_user_ids()
    for uid in user_ids:
        try:
            await application.bot.send_message(
                chat_id=uid,
                text=text,
                parse_mode="HTML"  # –≤–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
            )
        except Exception:
            # ignore failed sends (user blocked bot etc.)
            pass


def build_menu_keyboard():
    rows = []
    timestamp = int(datetime.now().timestamp())  # —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
    for name, hours in BOSSES.items():
        info = get_boss_info(name)
        last = info["last_killer"] if info and info["last_killer"] else "‚Äî"
        respawn_ts = info[
            "respawn_end_ts"] if info and info["respawn_end_ts"] else None
        respawn_text = format_datetime_ts(respawn_ts) if respawn_ts else "‚Äî"

        # –æ—á–µ—Ä–µ–¥—å –∫–ª–∞–Ω–∞
        queue_clan = None
        if last and last in CLANS:
            queue_clan = [c for c in CLANS if c != last][0]

        label = f"{name}\nNext: {queue_clan if queue_clan else '‚Äî'}\nResp: {respawn_text}"
        rows.append([
            InlineKeyboardButton(label,
                                 callback_data=f"boss_view|{name}|{timestamp}")
        ])

    # –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ–º–æ—â–∏
    rows.append([
        InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å üîÑ",
                             callback_data=f"menu_refresh|{timestamp}"),
        InlineKeyboardButton("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ ‚ùì", callback_data=f"help|{timestamp}")
    ])
    return InlineKeyboardMarkup(rows)


def build_boss_choice_keyboard(boss_name: str):
    rows = []
    timestamp = int(datetime.now().timestamp())  # —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
    for clan in CLANS:
        rows.append([
            InlineKeyboardButton(
                clan,
                callback_data=f"boss_kill|{boss_name}|{clan}|{timestamp}")
        ])

    # –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–∏–µ" –∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞"
    rows.append([
        InlineKeyboardButton(
            "–î—Ä—É–≥–∏–µ", callback_data=f"boss_other|{boss_name}|{timestamp}")
    ])
    rows.append([
        InlineKeyboardButton(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ‚öôÔ∏è",
            callback_data=f"boss_setup|{boss_name}|{timestamp}")
    ])
    rows.append([
        InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚óÄÔ∏è",
                             callback_data=f"menu_back|{timestamp}")
    ])
    return InlineKeyboardMarkup(rows)


# ---------------- Handlers ----------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user is None:
        return
    telegram_id = user.id
    add_user_if_not_exists(telegram_id)
    text = f"–í–∞—à Telegram ID: {telegram_id}\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("Start ‚ñ∂Ô∏è", callback_data="first_start")],
    ])

    await update.effective_chat.send_message(text, reply_markup=keyboard)


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "- /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é –±–æ—Å—Å–æ–≤\n"
        "- /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Å—Å–æ–≤\n"
        "- /add_admin [id] ‚Äî –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞)\n"
        "- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Å—Å–æ–≤, —á–µ–π –∫–ª–∞–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –≤—Ä–µ–º—è –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è\n"
        "- –ù–∞–∂–∞–≤ –Ω–∞ –±–æ—Å—Å–∞, <b>–∞–¥–º–∏–Ω</b> –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —É–±–∏–ª –±–æ—Å—Å–∞\n"
        "- üíÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "- üîî –ó–∞ 10 –º–∏–Ω—É—Ç –¥–æ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é –∫–ª–∞–Ω–∞\n"
        "- ‚öîÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Å—Å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞\n"
        "- –ö–Ω–æ–ø–∫–∞ '–û–±–Ω–æ–≤–∏—Ç—å üîÑ' ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n"
        "–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—Ç–º–µ—á–∞—Ç—å —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞ –≤ –º–µ–Ω—é.")
    await update.effective_chat.send_message(text, parse_mode="HTML")


    # send persistent start -> menu button
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        return
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –±–æ—Å—Å–æ–≤
    await update.message.reply_text("–ú–µ–Ω—é:",
                                    reply_markup=build_menu_keyboard(),
                                    parse_mode="HTML")
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("Start ‚ñ∂Ô∏è", callback_data="first_start")],
    ])
    await update.message.reply_text(text,
                                    reply_markup=keyboard,
                                    parse_mode="HTML")


async def add_admin_handler(update: Update,
                            context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user is None:
        return
    if user.id != OWNER_ID:
        await update.message.reply_text(
            "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return
    args = context.args
    if not args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <telegram_id>")
        return
    try:
        tid = int(args[0])
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    set_admin(tid)
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tid} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")


async def callback_query_handler(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    data = query.data or ""
    await query.answer()
    application = context.application

    parts = data.split("|")
    key = parts[0]

    # ---------------- Start / Refresh menu ----------------
    if key in ("first_start", "menu_refresh"):
        text = "–ú–µ–Ω—é:\u200b"
        try:
            await query.message.edit_text(text,
                                          reply_markup=build_menu_keyboard(),
                                          parse_mode="HTML")
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise
        return

    # ---------------- Boss view ----------------
    if key == "boss_view" and len(parts) >= 2:
        boss_name = parts[1]
        keyboard = build_boss_choice_keyboard(boss_name)
        text = f"–ë–æ—Å—Å: <b>{boss_name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–Ω —É–±–∏–≤—à–∏–π –±–æ—Å—Å–∞:\u200b"
        try:
            await query.message.edit_text(text,
                                          reply_markup=keyboard,
                                          parse_mode="HTML")
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise
        return

    # ---------------- Boss other ----------------
    if key == "boss_other" and len(parts) >= 2:
        boss_name = parts[1]
        info = get_boss_info(boss_name)
        if not info:
            return
        last_killer = info["last_killer"]
        hours = BOSSES.get(boss_name)
        if hours is None:
            return
        respawn_ts = int((datetime.now() + timedelta(hours=hours)).timestamp())
        set_boss_killer_and_respawn(boss_name, last_killer, respawn_ts)
        if boss_name in boss_tasks:
            task = boss_tasks[boss_name]
            if not task.done():
                task.cancel()
        boss_tasks[boss_name] = asyncio.create_task(
            boss_respawn_task(application, boss_name, respawn_ts))
        try:
            await query.message.edit_text("–ú–µ–Ω—é:\u200b",
                                          reply_markup=build_menu_keyboard(),
                                          parse_mode="HTML")
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise
        return

    # ---------------- Boss setup ----------------
    if key == "boss_setup" and len(parts) >= 2:
        boss_name = parts[1]
        user = query.from_user
        if not user or not is_admin(user.id):
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä—ã.",
                               show_alert=True)
            return

        keyboard_buttons = [[
            InlineKeyboardButton(
                clan, callback_data=f"boss_setup_clan|{boss_name}|{clan}")
        ] for clan in CLANS]
        keyboard_buttons.append([
            InlineKeyboardButton(
                "–ù–∞–∑–∞–¥ ‚óÄÔ∏è",
                callback_data=f"menu_back|{int(datetime.now().timestamp())}")
        ])
        keyboard = InlineKeyboardMarkup(keyboard_buttons)
        try:
            await query.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–Ω, –∑–∞–±—Ä–∞–≤—à–∏–π –ª—É—Ç –¥–ª—è {boss_name}:\u200b",
                reply_markup=keyboard)
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise
        return

    # ---------------- Boss setup clan (custom timer input) ----------------
    if key == "boss_setup_clan" and len(parts) >= 3:
        boss_name, clan = parts[1], parts[2]
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é
        awaiting_custom_timer[boss_name] = {
            "clan": clan,
            "awaiting_minutes": True,
            "message_id": query.message.message_id,
            "chat_id": query.message.chat_id
        }
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await query.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ —Ä–µ—Å–ø–∞–≤–Ω–∞ –¥–ª—è {boss_name} (–∫–ª–∞–Ω {clan}):"
        )
        return

    # ---------------- Record boss kill ----------------
    if key == "boss_kill" and len(parts) >= 3:
        boss_name, clan = parts[1], parts[2]
        user = query.from_user
        if not user or not is_admin(user.id):
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—Ç–º–µ—á–∞—Ç—å —É–±–∏–π—Å—Ç–≤–æ.",
                               show_alert=True)
            return

        hours = BOSSES.get(boss_name)
        if hours is None:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Å—Å.")
            return

        respawn_ts = int((datetime.now() + timedelta(hours=hours)).timestamp())
        set_boss_killer_and_respawn(boss_name, clan, respawn_ts)
        if boss_name in boss_tasks:
            task = boss_tasks[boss_name]
            if not task.done():
                task.cancel()
        boss_tasks[boss_name] = asyncio.create_task(
            boss_respawn_task(application, boss_name, respawn_ts))

        emoji_kill = "üíÄ"
        emoji_time = "‚è∞"
        text = f"{emoji_kill} <b>{boss_name}</b> —É–±–∏—Ç –∫–ª–∞–Ω–æ–º <b>{clan}</b>.\n{emoji_time} –°–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ - {format_datetime_ts(respawn_ts)}"
        await broadcast_message(application, text)
        try:
            await query.message.edit_text("–ú–µ–Ω—é:\u200b",
                                          reply_markup=build_menu_keyboard(),
                                          parse_mode="HTML")
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise
        return

    # ---------------- Back to menu ----------------
    if key == "menu_back":
        try:
            await query.message.edit_text("–ú–µ–Ω—é –±–æ—Å—Å–æ–≤:\u200b",
                                          reply_markup=build_menu_keyboard(),
                                          parse_mode="HTML")
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise
        return

    # ---------------- Help ----------------
    if key == "help":
        help_text = (
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –º–µ–Ω—é –±–æ—Å—Å–æ–≤\n"
            "- /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Å—Å–æ–≤\n"
            "- /add_admin [id] ‚Äî –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞)\n"
            "- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Å—Å–æ–≤, —á–µ–π –∫–ª–∞–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –≤—Ä–µ–º—è –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è\n"
            "- –ù–∞–∂–∞–≤ –Ω–∞ –±–æ—Å—Å–∞, <b>–∞–¥–º–∏–Ω</b> –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —É–±–∏–ª –±–æ—Å—Å–∞\n"
            "- üíÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "- üîî –ó–∞ 10 –º–∏–Ω—É—Ç –¥–æ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é –∫–ª–∞–Ω–∞\n"
            "- ‚öîÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Å—Å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞\n"
            "- –ö–Ω–æ–ø–∫–∞ '–û–±–Ω–æ–≤–∏—Ç—å üîÑ' ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        await query.message.reply_text(help_text, parse_mode="HTML")
        return


async def custom_timer_input_handler(update: Update,
                                     context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or not is_admin(user.id):
        return

    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
        return
    minutes = int(text)

    for boss_name, data in list(awaiting_custom_timer.items()):
        if data.get("awaiting_minutes"):
            clan = data["clan"]
            respawn_ts = int(
                (datetime.now() + timedelta(minutes=minutes)).timestamp())

            # –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î
            set_boss_killer_and_respawn(boss_name, clan, respawn_ts)

            # –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
            if boss_name in boss_tasks:
                task = boss_tasks[boss_name]
                if not task.done():
                    task.cancel()

            # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            task = asyncio.create_task(
                boss_respawn_task(context.application, boss_name, respawn_ts))
            boss_tasks[boss_name] = task

            # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –±—ã–ª –≤—ã–±–æ—Ä –∫–ª–∞–Ω–∞)
            try:
                msg_id = data.get("message_id")
                if msg_id:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=msg_id,
                        text="‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception:
                pass

            # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ–∂–∏–¥–∞–Ω–∏—è
            del awaiting_custom_timer[boss_name]

            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await update.effective_chat.send_message(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_menu_keyboard())
            break


# ---------------- Background task for respawn reminders ----------------
async def boss_respawn_task(application, boss_name: str, respawn_ts: int):
    """
    –ñ–¥—ë—Ç –¥–æ (respawn_ts - 10 –º–∏–Ω—É—Ç) ‚Üí —à–ª—ë—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–≤—Å–µ–º —é–∑–µ—Ä–∞–º + –≤ –≥—Ä—É–ø–ø—É).
    –ü–æ—Ç–æ–º –∂–¥—ë—Ç –¥–æ respawn_ts ‚Üí —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Å–ø–∞–≤–Ω–µ (—Ç–æ–ª—å–∫–æ —é–∑–µ—Ä–∞–º).
    """
    try:
        now_ts = int(datetime.now().timestamp())
        warn_ts = respawn_ts - 10 * 60  # –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ —Ä–µ—Å–ø–∞–≤–Ω–∞

        # --- 10-–º–∏–Ω—É—Ç–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ---
        if warn_ts > now_ts:
            await asyncio.sleep(warn_ts - now_ts)

            info = get_boss_info(boss_name)
            last_killer = info["last_killer"] if info else None

            queue_clan = None
            if last_killer and last_killer in CLANS:
                queue_clan = [c for c in CLANS if c != last_killer][0]

            emoji_alarm = "üîî"
            text = f"{emoji_alarm} {boss_name}, –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç."
            if queue_clan:
                text += f"\n–û—á–µ—Ä–µ–¥—å –∫–ª–∞–Ω–∞ - {queue_clan}."

            # –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            await broadcast_message(application, text)

            # –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
            if GROUP_CHAT_ID:
                try:
                    await application.bot.send_message(
                        chat_id=GROUP_CHAT_ID,
                        text=text,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

        # --- —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—Å–ø–∞–≤–Ω–∞ ---
        now_ts = int(datetime.now().timestamp())
        if respawn_ts > now_ts:
            await asyncio.sleep(respawn_ts - now_ts)

        emoji_revive = "‚öîÔ∏è"
        text = f"{emoji_revive} {boss_name} —Ç–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞!"

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Å–ø–∞–≤–Ω–µ –∏–¥—ë—Ç —Ç–æ–ª—å–∫–æ —é–∑–µ—Ä–∞–º
        await broadcast_message(application, text)

        # –æ—á–∏—â–∞–µ–º respawn_end_ts, –æ—Å—Ç–∞–≤–ª—è–µ–º last_killer
        info = get_boss_info(boss_name)
        set_boss_killer_and_respawn(boss_name, info["last_killer"], None)

    except asyncio.CancelledError:
        return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ boss_respawn_task: {e}")
        return



async def custom_timer_input_handler(update: Update,
                                     context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or not is_admin(user.id):
        return

    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
        return
    minutes = int(text)

    for boss_name, data in list(awaiting_custom_timer.items()):
        if data.get("awaiting_minutes"):
            clan = data["clan"]
            respawn_ts = int(
                (datetime.now() + timedelta(minutes=minutes)).timestamp())

            # –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î
            set_boss_killer_and_respawn(boss_name, clan, respawn_ts)

            # –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
            if boss_name in boss_tasks:
                task = boss_tasks[boss_name]
                if not task.done():
                    task.cancel()

            # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            task = asyncio.create_task(
                boss_respawn_task(context.application, boss_name, respawn_ts))
            boss_tasks[boss_name] = task

            # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –µ–≥–æ
            try:
                chat_id = data["chat_id"]
                message_id = data["message_id"]
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=
                    f"‚úÖ –¢–∞–π–º–µ—Ä –¥–ª—è {boss_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
            except Exception:
                pass

            # —É–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            del awaiting_custom_timer[boss_name]

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await update.effective_chat.send_message(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_menu_keyboard())
            break


# ---------------- Application setup ----------------
async def on_startup(application):
    # –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    await restore_boss_tasks(application)
    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞—Ç—å –º–µ–Ω—é –≤—Å–µ–º
    await broadcast_message(application,
                            "–ú–µ–Ω—é –±–æ—Å—Å–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")


async def restore_boss_tasks(application):
    now_ts = int(datetime.now().timestamp())
    for name, hours, last_killer, respawn_end_ts in get_all_bosses():
        if respawn_end_ts and respawn_end_ts > now_ts:
            # —Å–æ–∑–¥–∞–µ–º background task
            task = asyncio.create_task(
                boss_respawn_task(application, name, respawn_end_ts))
            boss_tasks[name] = task


async def set_commands(application):
    commands = [
        BotCommand("start", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –º–µ–Ω—é"),
        BotCommand("add_admin", "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"),
        BotCommand("help", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        BotCommand("menu", "–ú–µ–Ω—é –±–æ—Å—Å–æ–≤")
    ]
    await application.bot.set_my_commands(commands)
    await application.bot.set_chat_menu_button(
        menu_button=MenuButtonCommands())
    await application.bot.set_chat_menu_button(
        menu_button=MenuButtonCommands())


def main():
    if not TOKEN:
        print("ERROR: TELEGRAM_TOKEN env var not set.")
        return

    app = ApplicationBuilder().token(TOKEN).post_init(set_commands).build()

    # Commands
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("menu", menu_handler))
    app.add_handler(CommandHandler("add_admin", add_admin_handler))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.
            COMMAND,  # –ª–æ–≤–∏–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫–æ–º–∞–Ω–¥—ã
            custom_timer_input_handler  # —Ç–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        ))
    # CallbackQuery handler for buttons
    app.add_handler(CallbackQueryHandler(callback_query_handler))

    print("Bot starting...")
    app.run_polling()


if __name__ == "__main__":
    main()


